/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 32.6.3 Wed Feb 20 12:39:08 2019.
 */

#ifndef LYNX19GW_H
#define LYNX19GW_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

#define LYNX19GW_AS_TORQUE_REQ_FRAME_ID (0xe1u)
#define LYNX19GW_AS_DL_SENSORS_FRAME_ID (0xe2u)
#define LYNX19GW_NR_DL_SENSORS_4_NEW_FRAME_ID (0xb7u)
#define LYNX19GW_NR_DL_TV_OUT_3_NEW_FRAME_ID (0xb6u)
#define LYNX19GW_DL_AS_STATUS_FRAME_ID (0xd4u)
#define LYNX19GW_NR_DL_TV_OUT_2_FRAME_ID (0xb5u)
#define LYNX19GW_NR_DL_TV_OUT_1_FRAME_ID (0xb4u)
#define LYNX19GW_DL_NR_TV_CONF_2_FRAME_ID (0xd2u)
#define LYNX19GW_DL_NR_TV_CONF_1_FRAME_ID (0xd1u)
#define LYNX19GW_PER_PDO_1_TX_FRAME_ID (0x185u)
#define LYNX19GW_PER_PDO_2_TX_FRAME_ID (0x285u)
#define LYNX19GW_PEL_PDO_2_TX_FRAME_ID (0x287u)
#define LYNX19GW_PEL_PDO_1_TX_FRAME_ID (0x187u)
#define LYNX19GW_NR_PER_PDO_2_RX_FRAME_ID (0x305u)
#define LYNX19GW_NR_PEL_PDO_2_RX_FRAME_ID (0x307u)
#define LYNX19GW_NR_PER_PDO_1_RX_FRAME_ID (0x205u)
#define LYNX19GW_CLIENT_BMS_DATA_FRAME_ID (0xf1u)
#define LYNX19GW_BMS_CLIENT_CELL_TEMPERATURES_FRAME_ID (0xa2u)
#define LYNX19GW_BMS_CLIENT_CELL_VOLTAGES_FRAME_ID (0xa3u)
#define LYNX19GW_NF_DL_BUTTONS_RTD_FRAME_ID (0xc3u)
#define LYNX19GW_DATALOGGER_CONFIG_FRAME_ID (0x10u)
#define LYNX19GW_BMS_DL_HARTBEAT_FRAME_ID (0xafu)
#define LYNX19GW_NR_DL_HARTBEAT_FRAME_ID (0xbfu)
#define LYNX19GW_NF_DL_HARTBEAT_FRAME_ID (0xcfu)
#define LYNX19GW_BMS_DL_DATA_FRAME_ID (0xa1u)
#define LYNX19GW_NR_PEL_PDO_1_RX_FRAME_ID (0x207u)
#define LYNX19GW_NR_DL_SENSORS_3_FRAME_ID (0xb3u)
#define LYNX19GW_NR_DL_SENSORS_2_FRAME_ID (0xb2u)
#define LYNX19GW_NR_DL_SENSORS_1_FRAME_ID (0xb1u)
#define LYNX19GW_NF_NR_SENSORS_1_FRAME_ID (0xc1u)
#define LYNX19GW_NF_NR_SENSORS_2_FRAME_ID (0xc2u)

/**
 * Signals in message AS_Torque_Req.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_as_torque_req_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_set_point_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_set_point_right;
};

/**
 * Signals in message AS_DL_Sensors.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_as_dl_sensors_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t as_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t steering_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rack_position;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pressure_ebs_act;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pressure_ebs_line;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t pressure_service;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t pressure_regulator;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t as_rtd;
};

/**
 * Signals in message NR_DL_Sensors_4_NEW.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_dl_sensors_4_new_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message NR_DL_TV_out_3_NEW.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_dl_tv_out_3_new_t {
    /**
     * Dummy signal in empty message.
     */
    uint8_t dummy;
};

/**
 * Signals in message DL_AS_Status.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_dl_as_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t as_mission;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_front;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake_rear;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t dl_status;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t acc_so_c;
};

/**
 * Signals in message NR_DL_TV_out_2.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_dl_tv_out_2_t {
    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t tv_out_mu;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t tv_out_sw_ang;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t tv_out_tv_l_act;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t tv_out_tv_r_act;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t tv_out_yaw_rate_ref;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tv_out_yrc_act;
};

/**
 * Signals in message NR_DL_TV_out_1.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_dl_tv_out_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t tv_out_fz_rl;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t tv_out_fz_rr;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tv_out_mz_req;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t tv_out_velocity;
};

/**
 * Signals in message DL_NR_TV_Conf_2.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_dl_nr_tv_conf_2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tv_lltd_ay_scaling;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tv_tc_delta_th;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tv_tc_kgain;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tv_yrc_kbias;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tv_yrc_os_agr;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tv_tv_mode;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t tv_switches;
};

/**
 * Signals in message DL_NR_TV_Conf_1.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_dl_nr_tv_conf_1_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t tv_ku_stat;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t tv_pid_kp_scale;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t tv_pid_kd_scale;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    uint16_t tv_pid_tt_scale;
};

/**
 * Signals in message PER_PDO_1_TX.
 *
 * Torque demad to PE (Node2-PE & Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_per_pdo_1_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_engaged_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_estimate_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_estimate_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t errors_right;
};

/**
 * Signals in message PER_PDO_2_TX.
 *
 * Torque demad to PE (Node2-PE & Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_per_pdo_2_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t measured_udc_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t power_estimate_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t temperature_windings_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t temperature_inverter_right;
};

/**
 * Signals in message PEL_PDO_2_TX.
 *
 * Torque demad to PE (Node2-PE & Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_pel_pdo_2_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t power_estimate_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t measured_udc_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t temperature_windings_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t temperature_inverter_left;
};

/**
 * Signals in message PEL_PDO_1_TX.
 *
 * Torque demad to PE (Node2-PE & Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_pel_pdo_1_tx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive_engaged_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_estimate_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_estimate_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t errors_left;
};

/**
 * Signals in message NR_PER_PDO_2_RX.
 *
 * Torque demad to PE (Node2-PE & Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_per_pdo_2_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_drive_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_set_point_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_limit_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t error_reset_right;
};

/**
 * Signals in message NR_PEL_PDO_2_RX.
 *
 * Torque demad to PE (Node2-PE & Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_pel_pdo_2_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_drive_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_set_point_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_limit_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t error_reset_left;
};

/**
 * Signals in message NR_PER_PDO_1_RX.
 *
 * Torque demad to PE (Node2-PE & Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_per_pdo_1_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_drive_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_set_point_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_limit_right;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t error_reset_right;
};

/**
 * Signals in message Client_BMS_Data.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_client_bms_data_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_communication;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t trigger_imd;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t trigger_bms;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_reset;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t bms_discharge;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_discharge_threshold;
};

/**
 * Signals in message BMS_Client_Cell_Temperatures.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_bms_client_cell_temperatures_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_temparature_payload_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_temparature_payload_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_temparature_payload_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_temparature_payload_3;
};

/**
 * Signals in message BMS_Client_Cell_Voltages.
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_bms_client_cell_voltages_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_voltage_payload_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_voltage_payload_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_voltage_payload_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_voltage_payload_3;
};

/**
 * Signals in message NF_DL_Buttons_RTD.
 *
 * Button presses (Datalogger-Node2
)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nf_dl_buttons_rtd_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t buttons;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t knob_l;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t knob_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t redy_to_drive;
};

/**
 * Signals in message Datalogger_Config.
 *
 * Configuration (Datalogger- Node12)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_datalogger_config_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t config_id;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t config_payload_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t config_payload_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t config_payload_3;
};

/**
 * Signals in message BMS_DL_Hartbeat.
 *
 * Status of AMS
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_bms_dl_hartbeat_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t bms_status;
};

/**
 * Signals in message NR_DL_Hartbeat.
 *
 * Status of Node2
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_dl_hartbeat_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t node_2_status;
};

/**
 * Signals in message NF_DL_Hartbeat.
 *
 * Status of Node1
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nf_dl_hartbeat_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t node_1_status;
};

/**
 * Signals in message BMS_DL_Data.
 *
 * Current, Voltage, Temp (PE-Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_bms_dl_data_t {
    /**
     * Range: 0..65535 (0..65535 A)
     * Scale: 1
     * Offset: 0
     */
    uint16_t accumulator_current;

    /**
     * Range: 0..65535 (0..65535 V)
     * Scale: 1
     * Offset: 0
     */
    uint16_t accumulator_voltage;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t accumulator_so_c;

    /**
     * Range: 0..65535 (0..65535 oC)
     * Scale: 1
     * Offset: 0
     */
    uint16_t accumulator_temp;
};

/**
 * Signals in message NR_PEL_PDO_1_RX.
 *
 * Torque demad to PE (Node2-PE & Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_pel_pdo_1_rx_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t enable_drive_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t torque_set_point_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t speed_limit_left;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t error_reset_left;
};

/**
 * Signals in message NR_DL_Sensors_3.
 *
 * Acceleration, gyro (Node2-Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_dl_sensors_3_t {
    /**
     * Range: -32768..32767 (-327.68..327.67 m/s^2)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t acceleration_x;

    /**
     * Range: -32768..32767 (-327.68..327.67 m/s^2)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t acceleration_y;

    /**
     * Range: 0..200 (0..200 oC)
     * Scale: 1
     * Offset: 0
     */
    uint8_t water_temp_1;

    /**
     * Range: 0..200 (0..200 oC)
     * Scale: 1
     * Offset: 0
     */
    uint8_t water_temp_2;

    /**
     * Range: 0..200 (0..200 oC)
     * Scale: 1
     * Offset: 0
     */
    uint8_t water_temp_3;
};

/**
 * Signals in message NR_DL_Sensors_2.
 *
 * Disk temp, Water temp, oil temp (Node2-Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_dl_sensors_2_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rotor_ambient_temp_l;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rotor_ambient_temp_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rotor_object_temp_l;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t rotor_object_temp_r;

    /**
     * Range: 0..200 (0..200 0C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_box_temp_l;

    /**
     * Range: 0..200 (0..200 0C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear_box_temp_r;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t yaw;
};

/**
 * Signals in message NR_DL_Sensors_1.
 *
 * Wheel speed, damper travel (Node2-Logg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nr_dl_sensors_1_t {
    /**
     * Range: 0..6000 (0..6000 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t damper_rl;

    /**
     * Range: 0..6000 (0..6000 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t damper_rr;

    /**
     * Range: 0..65535 (0..6553.5 Km/h)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_speed_rl;

    /**
     * Range: 0..65535 (0..6553.5 Km/h)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_speed_rr;
};

/**
 * Signals in message NF_NR_Sensors_1.
 *
 * Throttle, Brake, Stearing, Braketemp (Node1-Node2 & Logg)


 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nf_nr_sensors_1_t {
    /**
     * Range: 0..255 (0..255 0C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t disk_temp_fl;

    /**
     * Range: 0..255 (0..255 0C)
     * Scale: 1
     * Offset: 0
     */
    uint8_t disk_temp_fr;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t brake;

    /**
     * Range: -120..120 (-120..120 o)
     * Scale: 1
     * Offset: 0
     */
    int8_t steering_angle;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t throttle;
};

/**
 * Signals in message NF_NR_Sensors_2.
 *
 * Wheel speed, damper travel (Node1-Node2 & Losgg)
 *
 * All signal values are as on the CAN bus.
 */
struct lynx19gw_nf_nr_sensors_2_t {
    /**
     * Range: 0..65535 (0..6553.5 Km/h)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_speed_fl;

    /**
     * Range: 0..65535 (0..6553.5 Km/h)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t wheel_speed_fr;

    /**
     * Range: 0..6000 (0..6000 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t damper_fl;

    /**
     * Range: 0..6000 (0..6000 mm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t damper_fr;
};

/**
 * Pack message AS_Torque_Req.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_as_torque_req_pack(
    uint8_t *dst_p,
    const struct lynx19gw_as_torque_req_t *src_p,
    size_t size);

/**
 * Unpack message AS_Torque_Req.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_as_torque_req_unpack(
    struct lynx19gw_as_torque_req_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_as_torque_req_torque_set_point_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_torque_req_torque_set_point_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_torque_req_torque_set_point_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_as_torque_req_torque_set_point_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_torque_req_torque_set_point_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_torque_req_torque_set_point_right_is_in_range(uint16_t value);

/**
 * Pack message AS_DL_Sensors.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_as_dl_sensors_pack(
    uint8_t *dst_p,
    const struct lynx19gw_as_dl_sensors_t *src_p,
    size_t size);

/**
 * Unpack message AS_DL_Sensors.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_as_dl_sensors_unpack(
    struct lynx19gw_as_dl_sensors_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_as_dl_sensors_as_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_dl_sensors_as_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_dl_sensors_as_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_as_dl_sensors_steering_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_dl_sensors_steering_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_dl_sensors_steering_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_as_dl_sensors_rack_position_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_dl_sensors_rack_position_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_dl_sensors_rack_position_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_as_dl_sensors_pressure_ebs_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_dl_sensors_pressure_ebs_act_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_dl_sensors_pressure_ebs_act_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_as_dl_sensors_pressure_ebs_line_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_dl_sensors_pressure_ebs_line_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_dl_sensors_pressure_ebs_line_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_as_dl_sensors_pressure_service_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_dl_sensors_pressure_service_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_dl_sensors_pressure_service_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t lynx19gw_as_dl_sensors_pressure_regulator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_dl_sensors_pressure_regulator_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_dl_sensors_pressure_regulator_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t lynx19gw_as_dl_sensors_as_rtd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_as_dl_sensors_as_rtd_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_as_dl_sensors_as_rtd_is_in_range(int8_t value);

/**
 * Pack message NR_DL_Sensors_4_NEW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_dl_sensors_4_new_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_dl_sensors_4_new_t *src_p,
    size_t size);

/**
 * Unpack message NR_DL_Sensors_4_NEW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_dl_sensors_4_new_unpack(
    struct lynx19gw_nr_dl_sensors_4_new_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message NR_DL_TV_out_3_NEW.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_dl_tv_out_3_new_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_dl_tv_out_3_new_t *src_p,
    size_t size);

/**
 * Unpack message NR_DL_TV_out_3_NEW.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_dl_tv_out_3_new_unpack(
    struct lynx19gw_nr_dl_tv_out_3_new_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Pack message DL_AS_Status.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_dl_as_status_pack(
    uint8_t *dst_p,
    const struct lynx19gw_dl_as_status_t *src_p,
    size_t size);

/**
 * Unpack message DL_AS_Status.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_dl_as_status_unpack(
    struct lynx19gw_dl_as_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_as_status_as_mission_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_as_status_as_mission_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_as_status_as_mission_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_as_status_brake_front_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_as_status_brake_front_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_as_status_brake_front_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_as_status_brake_rear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_as_status_brake_rear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_as_status_brake_rear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_as_status_dl_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_as_status_dl_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_as_status_dl_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_as_status_acc_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_as_status_acc_so_c_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_as_status_acc_so_c_is_in_range(uint8_t value);

/**
 * Pack message NR_DL_TV_out_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_dl_tv_out_2_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_dl_tv_out_2_t *src_p,
    size_t size);

/**
 * Unpack message NR_DL_TV_out_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_dl_tv_out_2_unpack(
    struct lynx19gw_nr_dl_tv_out_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_tv_out_2_tv_out_mu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_2_tv_out_mu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_2_tv_out_mu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t lynx19gw_nr_dl_tv_out_2_tv_out_sw_ang_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_2_tv_out_sw_ang_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_2_tv_out_sw_ang_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t lynx19gw_nr_dl_tv_out_2_tv_out_tv_l_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_2_tv_out_tv_l_act_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_2_tv_out_tv_l_act_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t lynx19gw_nr_dl_tv_out_2_tv_out_tv_r_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_2_tv_out_tv_r_act_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_2_tv_out_tv_r_act_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_nr_dl_tv_out_2_tv_out_yaw_rate_ref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_2_tv_out_yaw_rate_ref_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_2_tv_out_yaw_rate_ref_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_tv_out_2_tv_out_yrc_act_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_2_tv_out_yrc_act_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_2_tv_out_yrc_act_is_in_range(uint8_t value);

/**
 * Pack message NR_DL_TV_out_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_dl_tv_out_1_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_dl_tv_out_1_t *src_p,
    size_t size);

/**
 * Unpack message NR_DL_TV_out_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_dl_tv_out_1_unpack(
    struct lynx19gw_nr_dl_tv_out_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_nr_dl_tv_out_1_tv_out_fz_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_1_tv_out_fz_rl_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_1_tv_out_fz_rl_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_nr_dl_tv_out_1_tv_out_fz_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_1_tv_out_fz_rr_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_1_tv_out_fz_rr_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_nr_dl_tv_out_1_tv_out_mz_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_1_tv_out_mz_req_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_1_tv_out_mz_req_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_nr_dl_tv_out_1_tv_out_velocity_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_tv_out_1_tv_out_velocity_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_tv_out_1_tv_out_velocity_is_in_range(int16_t value);

/**
 * Pack message DL_NR_TV_Conf_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_dl_nr_tv_conf_2_pack(
    uint8_t *dst_p,
    const struct lynx19gw_dl_nr_tv_conf_2_t *src_p,
    size_t size);

/**
 * Unpack message DL_NR_TV_Conf_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_dl_nr_tv_conf_2_unpack(
    struct lynx19gw_dl_nr_tv_conf_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_nr_tv_conf_2_tv_lltd_ay_scaling_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_2_tv_lltd_ay_scaling_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_2_tv_lltd_ay_scaling_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_nr_tv_conf_2_tv_tc_delta_th_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_2_tv_tc_delta_th_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_2_tv_tc_delta_th_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_nr_tv_conf_2_tv_tc_kgain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_2_tv_tc_kgain_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_2_tv_tc_kgain_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_nr_tv_conf_2_tv_yrc_kbias_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_2_tv_yrc_kbias_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_2_tv_yrc_kbias_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_nr_tv_conf_2_tv_yrc_os_agr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_2_tv_yrc_os_agr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_2_tv_yrc_os_agr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_nr_tv_conf_2_tv_tv_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_2_tv_tv_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_2_tv_tv_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_dl_nr_tv_conf_2_tv_switches_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_2_tv_switches_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_2_tv_switches_is_in_range(uint8_t value);

/**
 * Pack message DL_NR_TV_Conf_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_dl_nr_tv_conf_1_pack(
    uint8_t *dst_p,
    const struct lynx19gw_dl_nr_tv_conf_1_t *src_p,
    size_t size);

/**
 * Unpack message DL_NR_TV_Conf_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_dl_nr_tv_conf_1_unpack(
    struct lynx19gw_dl_nr_tv_conf_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_dl_nr_tv_conf_1_tv_ku_stat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_1_tv_ku_stat_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_1_tv_ku_stat_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_dl_nr_tv_conf_1_tv_pid_kp_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_1_tv_pid_kp_scale_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_1_tv_pid_kp_scale_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_dl_nr_tv_conf_1_tv_pid_kd_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_1_tv_pid_kd_scale_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_1_tv_pid_kd_scale_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_dl_nr_tv_conf_1_tv_pid_tt_scale_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_dl_nr_tv_conf_1_tv_pid_tt_scale_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_dl_nr_tv_conf_1_tv_pid_tt_scale_is_in_range(uint16_t value);

/**
 * Pack message PER_PDO_1_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_per_pdo_1_tx_pack(
    uint8_t *dst_p,
    const struct lynx19gw_per_pdo_1_tx_t *src_p,
    size_t size);

/**
 * Unpack message PER_PDO_1_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_per_pdo_1_tx_unpack(
    struct lynx19gw_per_pdo_1_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_per_pdo_1_tx_drive_engaged_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_per_pdo_1_tx_drive_engaged_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_per_pdo_1_tx_drive_engaged_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_per_pdo_1_tx_torque_estimate_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_per_pdo_1_tx_torque_estimate_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_per_pdo_1_tx_torque_estimate_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_per_pdo_1_tx_speed_estimate_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_per_pdo_1_tx_speed_estimate_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_per_pdo_1_tx_speed_estimate_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_per_pdo_1_tx_errors_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_per_pdo_1_tx_errors_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_per_pdo_1_tx_errors_right_is_in_range(uint16_t value);

/**
 * Pack message PER_PDO_2_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_per_pdo_2_tx_pack(
    uint8_t *dst_p,
    const struct lynx19gw_per_pdo_2_tx_t *src_p,
    size_t size);

/**
 * Unpack message PER_PDO_2_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_per_pdo_2_tx_unpack(
    struct lynx19gw_per_pdo_2_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_per_pdo_2_tx_measured_udc_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_per_pdo_2_tx_measured_udc_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_per_pdo_2_tx_measured_udc_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_per_pdo_2_tx_power_estimate_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_per_pdo_2_tx_power_estimate_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_per_pdo_2_tx_power_estimate_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_per_pdo_2_tx_temperature_windings_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_per_pdo_2_tx_temperature_windings_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_per_pdo_2_tx_temperature_windings_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_per_pdo_2_tx_temperature_inverter_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_per_pdo_2_tx_temperature_inverter_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_per_pdo_2_tx_temperature_inverter_right_is_in_range(uint16_t value);

/**
 * Pack message PEL_PDO_2_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_pel_pdo_2_tx_pack(
    uint8_t *dst_p,
    const struct lynx19gw_pel_pdo_2_tx_t *src_p,
    size_t size);

/**
 * Unpack message PEL_PDO_2_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_pel_pdo_2_tx_unpack(
    struct lynx19gw_pel_pdo_2_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_pel_pdo_2_tx_power_estimate_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_pel_pdo_2_tx_power_estimate_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_pel_pdo_2_tx_power_estimate_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_pel_pdo_2_tx_measured_udc_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_pel_pdo_2_tx_measured_udc_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_pel_pdo_2_tx_measured_udc_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_pel_pdo_2_tx_temperature_windings_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_pel_pdo_2_tx_temperature_windings_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_pel_pdo_2_tx_temperature_windings_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_pel_pdo_2_tx_temperature_inverter_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_pel_pdo_2_tx_temperature_inverter_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_pel_pdo_2_tx_temperature_inverter_left_is_in_range(uint16_t value);

/**
 * Pack message PEL_PDO_1_TX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_pel_pdo_1_tx_pack(
    uint8_t *dst_p,
    const struct lynx19gw_pel_pdo_1_tx_t *src_p,
    size_t size);

/**
 * Unpack message PEL_PDO_1_TX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_pel_pdo_1_tx_unpack(
    struct lynx19gw_pel_pdo_1_tx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_pel_pdo_1_tx_drive_engaged_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_pel_pdo_1_tx_drive_engaged_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_pel_pdo_1_tx_drive_engaged_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_pel_pdo_1_tx_torque_estimate_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_pel_pdo_1_tx_torque_estimate_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_pel_pdo_1_tx_torque_estimate_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_pel_pdo_1_tx_speed_estimate_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_pel_pdo_1_tx_speed_estimate_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_pel_pdo_1_tx_speed_estimate_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_pel_pdo_1_tx_errors_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_pel_pdo_1_tx_errors_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_pel_pdo_1_tx_errors_left_is_in_range(uint16_t value);

/**
 * Pack message NR_PER_PDO_2_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_per_pdo_2_rx_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_per_pdo_2_rx_t *src_p,
    size_t size);

/**
 * Unpack message NR_PER_PDO_2_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_per_pdo_2_rx_unpack(
    struct lynx19gw_nr_per_pdo_2_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_per_pdo_2_rx_enable_drive_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_per_pdo_2_rx_enable_drive_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_per_pdo_2_rx_enable_drive_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_per_pdo_2_rx_torque_set_point_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_per_pdo_2_rx_torque_set_point_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_per_pdo_2_rx_torque_set_point_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_per_pdo_2_rx_speed_limit_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_per_pdo_2_rx_speed_limit_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_per_pdo_2_rx_speed_limit_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_per_pdo_2_rx_error_reset_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_per_pdo_2_rx_error_reset_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_per_pdo_2_rx_error_reset_right_is_in_range(uint16_t value);

/**
 * Pack message NR_PEL_PDO_2_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_pel_pdo_2_rx_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_pel_pdo_2_rx_t *src_p,
    size_t size);

/**
 * Unpack message NR_PEL_PDO_2_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_pel_pdo_2_rx_unpack(
    struct lynx19gw_nr_pel_pdo_2_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_pel_pdo_2_rx_enable_drive_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_pel_pdo_2_rx_enable_drive_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_pel_pdo_2_rx_enable_drive_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_pel_pdo_2_rx_torque_set_point_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_pel_pdo_2_rx_torque_set_point_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_pel_pdo_2_rx_torque_set_point_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_pel_pdo_2_rx_speed_limit_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_pel_pdo_2_rx_speed_limit_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_pel_pdo_2_rx_speed_limit_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_pel_pdo_2_rx_error_reset_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_pel_pdo_2_rx_error_reset_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_pel_pdo_2_rx_error_reset_left_is_in_range(uint16_t value);

/**
 * Pack message NR_PER_PDO_1_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_per_pdo_1_rx_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_per_pdo_1_rx_t *src_p,
    size_t size);

/**
 * Unpack message NR_PER_PDO_1_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_per_pdo_1_rx_unpack(
    struct lynx19gw_nr_per_pdo_1_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_per_pdo_1_rx_enable_drive_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_per_pdo_1_rx_enable_drive_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_per_pdo_1_rx_enable_drive_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_per_pdo_1_rx_torque_set_point_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_per_pdo_1_rx_torque_set_point_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_per_pdo_1_rx_torque_set_point_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_per_pdo_1_rx_speed_limit_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_per_pdo_1_rx_speed_limit_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_per_pdo_1_rx_speed_limit_right_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_per_pdo_1_rx_error_reset_right_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_per_pdo_1_rx_error_reset_right_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_per_pdo_1_rx_error_reset_right_is_in_range(uint16_t value);

/**
 * Pack message Client_BMS_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_client_bms_data_pack(
    uint8_t *dst_p,
    const struct lynx19gw_client_bms_data_t *src_p,
    size_t size);

/**
 * Unpack message Client_BMS_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_client_bms_data_unpack(
    struct lynx19gw_client_bms_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_client_bms_data_enable_communication_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_client_bms_data_enable_communication_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_client_bms_data_enable_communication_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_client_bms_data_trigger_imd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_client_bms_data_trigger_imd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_client_bms_data_trigger_imd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_client_bms_data_trigger_bms_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_client_bms_data_trigger_bms_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_client_bms_data_trigger_bms_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_client_bms_data_bms_reset_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_client_bms_data_bms_reset_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_client_bms_data_bms_reset_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_client_bms_data_bms_discharge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_client_bms_data_bms_discharge_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_client_bms_data_bms_discharge_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_client_bms_data_bms_discharge_threshold_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_client_bms_data_bms_discharge_threshold_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_client_bms_data_bms_discharge_threshold_is_in_range(uint16_t value);

/**
 * Pack message BMS_Client_Cell_Temperatures.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_bms_client_cell_temperatures_pack(
    uint8_t *dst_p,
    const struct lynx19gw_bms_client_cell_temperatures_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Client_Cell_Temperatures.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_bms_client_cell_temperatures_unpack(
    struct lynx19gw_bms_client_cell_temperatures_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_client_cell_temperatures_bms_temparature_payload_3_is_in_range(uint16_t value);

/**
 * Pack message BMS_Client_Cell_Voltages.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_bms_client_cell_voltages_pack(
    uint8_t *dst_p,
    const struct lynx19gw_bms_client_cell_voltages_t *src_p,
    size_t size);

/**
 * Unpack message BMS_Client_Cell_Voltages.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_bms_client_cell_voltages_unpack(
    struct lynx19gw_bms_client_cell_voltages_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_client_cell_voltages_bms_voltage_payload_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_client_cell_voltages_bms_voltage_payload_id_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_client_cell_voltages_bms_voltage_payload_id_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_client_cell_voltages_bms_voltage_payload_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_client_cell_voltages_bms_voltage_payload_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_client_cell_voltages_bms_voltage_payload_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_client_cell_voltages_bms_voltage_payload_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_client_cell_voltages_bms_voltage_payload_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_client_cell_voltages_bms_voltage_payload_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_client_cell_voltages_bms_voltage_payload_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_client_cell_voltages_bms_voltage_payload_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_client_cell_voltages_bms_voltage_payload_3_is_in_range(uint16_t value);

/**
 * Pack message NF_DL_Buttons_RTD.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nf_dl_buttons_rtd_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nf_dl_buttons_rtd_t *src_p,
    size_t size);

/**
 * Unpack message NF_DL_Buttons_RTD.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nf_dl_buttons_rtd_unpack(
    struct lynx19gw_nf_dl_buttons_rtd_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nf_dl_buttons_rtd_buttons_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_dl_buttons_rtd_buttons_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_dl_buttons_rtd_buttons_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nf_dl_buttons_rtd_knob_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_dl_buttons_rtd_knob_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_dl_buttons_rtd_knob_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nf_dl_buttons_rtd_knob_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_dl_buttons_rtd_knob_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_dl_buttons_rtd_knob_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t lynx19gw_nf_dl_buttons_rtd_redy_to_drive_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_dl_buttons_rtd_redy_to_drive_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_dl_buttons_rtd_redy_to_drive_is_in_range(int8_t value);

/**
 * Pack message Datalogger_Config.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_datalogger_config_pack(
    uint8_t *dst_p,
    const struct lynx19gw_datalogger_config_t *src_p,
    size_t size);

/**
 * Unpack message Datalogger_Config.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_datalogger_config_unpack(
    struct lynx19gw_datalogger_config_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_datalogger_config_config_id_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_datalogger_config_config_id_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_datalogger_config_config_id_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_datalogger_config_config_payload_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_datalogger_config_config_payload_1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_datalogger_config_config_payload_1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_datalogger_config_config_payload_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_datalogger_config_config_payload_2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_datalogger_config_config_payload_2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_datalogger_config_config_payload_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_datalogger_config_config_payload_3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_datalogger_config_config_payload_3_is_in_range(int16_t value);

/**
 * Pack message BMS_DL_Hartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_bms_dl_hartbeat_pack(
    uint8_t *dst_p,
    const struct lynx19gw_bms_dl_hartbeat_t *src_p,
    size_t size);

/**
 * Unpack message BMS_DL_Hartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_bms_dl_hartbeat_unpack(
    struct lynx19gw_bms_dl_hartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_dl_hartbeat_bms_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_dl_hartbeat_bms_status_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_dl_hartbeat_bms_status_is_in_range(uint16_t value);

/**
 * Pack message NR_DL_Hartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_dl_hartbeat_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_dl_hartbeat_t *src_p,
    size_t size);

/**
 * Unpack message NR_DL_Hartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_dl_hartbeat_unpack(
    struct lynx19gw_nr_dl_hartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_hartbeat_node_2_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_hartbeat_node_2_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_hartbeat_node_2_status_is_in_range(uint8_t value);

/**
 * Pack message NF_DL_Hartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nf_dl_hartbeat_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nf_dl_hartbeat_t *src_p,
    size_t size);

/**
 * Unpack message NF_DL_Hartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nf_dl_hartbeat_unpack(
    struct lynx19gw_nf_dl_hartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nf_dl_hartbeat_node_1_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_dl_hartbeat_node_1_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_dl_hartbeat_node_1_status_is_in_range(uint8_t value);

/**
 * Pack message BMS_DL_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_bms_dl_data_pack(
    uint8_t *dst_p,
    const struct lynx19gw_bms_dl_data_t *src_p,
    size_t size);

/**
 * Unpack message BMS_DL_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_bms_dl_data_unpack(
    struct lynx19gw_bms_dl_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_dl_data_accumulator_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_dl_data_accumulator_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_dl_data_accumulator_current_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_dl_data_accumulator_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_dl_data_accumulator_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_dl_data_accumulator_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_dl_data_accumulator_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_dl_data_accumulator_so_c_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_dl_data_accumulator_so_c_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_bms_dl_data_accumulator_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_bms_dl_data_accumulator_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_bms_dl_data_accumulator_temp_is_in_range(uint16_t value);

/**
 * Pack message NR_PEL_PDO_1_RX.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_pel_pdo_1_rx_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_pel_pdo_1_rx_t *src_p,
    size_t size);

/**
 * Unpack message NR_PEL_PDO_1_RX.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_pel_pdo_1_rx_unpack(
    struct lynx19gw_nr_pel_pdo_1_rx_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_pel_pdo_1_rx_enable_drive_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_pel_pdo_1_rx_enable_drive_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_pel_pdo_1_rx_enable_drive_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_pel_pdo_1_rx_torque_set_point_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_pel_pdo_1_rx_torque_set_point_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_pel_pdo_1_rx_torque_set_point_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_pel_pdo_1_rx_speed_limit_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_pel_pdo_1_rx_speed_limit_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_pel_pdo_1_rx_speed_limit_left_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_pel_pdo_1_rx_error_reset_left_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_pel_pdo_1_rx_error_reset_left_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_pel_pdo_1_rx_error_reset_left_is_in_range(uint16_t value);

/**
 * Pack message NR_DL_Sensors_3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_dl_sensors_3_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_dl_sensors_3_t *src_p,
    size_t size);

/**
 * Unpack message NR_DL_Sensors_3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_dl_sensors_3_unpack(
    struct lynx19gw_nr_dl_sensors_3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_nr_dl_sensors_3_acceleration_x_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_3_acceleration_x_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_3_acceleration_x_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_nr_dl_sensors_3_acceleration_y_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_3_acceleration_y_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_3_acceleration_y_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_sensors_3_water_temp_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_3_water_temp_1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_3_water_temp_1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_sensors_3_water_temp_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_3_water_temp_2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_3_water_temp_2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_sensors_3_water_temp_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_3_water_temp_3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_3_water_temp_3_is_in_range(uint8_t value);

/**
 * Pack message NR_DL_Sensors_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_dl_sensors_2_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_dl_sensors_2_t *src_p,
    size_t size);

/**
 * Unpack message NR_DL_Sensors_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_dl_sensors_2_unpack(
    struct lynx19gw_nr_dl_sensors_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_sensors_2_rotor_ambient_temp_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_2_rotor_ambient_temp_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_2_rotor_ambient_temp_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_sensors_2_rotor_ambient_temp_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_2_rotor_ambient_temp_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_2_rotor_ambient_temp_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_sensors_2_rotor_object_temp_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_2_rotor_object_temp_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_2_rotor_object_temp_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_sensors_2_rotor_object_temp_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_2_rotor_object_temp_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_2_rotor_object_temp_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_sensors_2_gear_box_temp_l_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_2_gear_box_temp_l_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_2_gear_box_temp_l_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nr_dl_sensors_2_gear_box_temp_r_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_2_gear_box_temp_r_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_2_gear_box_temp_r_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t lynx19gw_nr_dl_sensors_2_yaw_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_2_yaw_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_2_yaw_is_in_range(int16_t value);

/**
 * Pack message NR_DL_Sensors_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nr_dl_sensors_1_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nr_dl_sensors_1_t *src_p,
    size_t size);

/**
 * Unpack message NR_DL_Sensors_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nr_dl_sensors_1_unpack(
    struct lynx19gw_nr_dl_sensors_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_dl_sensors_1_damper_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_1_damper_rl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_1_damper_rl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_dl_sensors_1_damper_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_1_damper_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_1_damper_rr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_dl_sensors_1_wheel_speed_rl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_1_wheel_speed_rl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_1_wheel_speed_rl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nr_dl_sensors_1_wheel_speed_rr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nr_dl_sensors_1_wheel_speed_rr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nr_dl_sensors_1_wheel_speed_rr_is_in_range(uint16_t value);

/**
 * Pack message NF_NR_Sensors_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nf_nr_sensors_1_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nf_nr_sensors_1_t *src_p,
    size_t size);

/**
 * Unpack message NF_NR_Sensors_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nf_nr_sensors_1_unpack(
    struct lynx19gw_nf_nr_sensors_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nf_nr_sensors_1_disk_temp_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_nr_sensors_1_disk_temp_fl_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_nr_sensors_1_disk_temp_fl_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nf_nr_sensors_1_disk_temp_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_nr_sensors_1_disk_temp_fr_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_nr_sensors_1_disk_temp_fr_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nf_nr_sensors_1_brake_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_nr_sensors_1_brake_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_nr_sensors_1_brake_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t lynx19gw_nf_nr_sensors_1_steering_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_nr_sensors_1_steering_angle_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_nr_sensors_1_steering_angle_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t lynx19gw_nf_nr_sensors_1_throttle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_nr_sensors_1_throttle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_nr_sensors_1_throttle_is_in_range(uint8_t value);

/**
 * Pack message NF_NR_Sensors_2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int lynx19gw_nf_nr_sensors_2_pack(
    uint8_t *dst_p,
    const struct lynx19gw_nf_nr_sensors_2_t *src_p,
    size_t size);

/**
 * Unpack message NF_NR_Sensors_2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int lynx19gw_nf_nr_sensors_2_unpack(
    struct lynx19gw_nf_nr_sensors_2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nf_nr_sensors_2_wheel_speed_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_nr_sensors_2_wheel_speed_fl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_nr_sensors_2_wheel_speed_fl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nf_nr_sensors_2_wheel_speed_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_nr_sensors_2_wheel_speed_fr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_nr_sensors_2_wheel_speed_fr_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nf_nr_sensors_2_damper_fl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_nr_sensors_2_damper_fl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_nr_sensors_2_damper_fl_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t lynx19gw_nf_nr_sensors_2_damper_fr_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double lynx19gw_nf_nr_sensors_2_damper_fr_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool lynx19gw_nf_nr_sensors_2_damper_fr_is_in_range(uint16_t value);

#endif
